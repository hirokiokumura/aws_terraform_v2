name: Terraform Network Firewall Demo

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/network-firewall-demo/**'
      - '.github/workflows/terraform-network-firewall.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/network-firewall-demo/**'
      - '.github/workflows/terraform-network-firewall.yml'
  workflow_dispatch:

env:
  ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
  SESSION_NAME: gh-oidc-nfw-${{ github.run_id }}-${{ github.run_attempt }}
  TF_WORKING_DIR: terraform/network-firewall-demo

jobs:
  terraform:
    name: Terraform Plan and Apply
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
      pull-requests: write

    steps:
      # AWS認証情報の設定
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ap-northeast-1

      # リポジトリのチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # Terraformのセットアップ
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      # Terraformフォーマットチェック
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Terraform初期化
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Terraform検証
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Terraform Plan (PRの場合)
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Plan結果をPRにコメント
      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Network Firewall Demo 🚀

            #### Terraform Format and Style 🖌: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️: \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖: \`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖: \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # Terraform Apply (mainブランチへのpush時のみ)
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}

      # Apply結果の出力
      - name: Show Outputs
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform output -json
        working-directory: ${{ env.TF_WORKING_DIR }}
